{"version":3,"sources":["assets/InfiniteHeights/scripts/InfiniteHeights.GameManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport Ballon from \"./Game/InfiniteHeights.Ballon\";\nimport { Global } from \"./InfiniteHeights.Global\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class GameManager extends cc.Component {\n\n    public static instance: GameManager = null;\n    @property(cc.Prefab)\n    prfGameView: cc.Prefab = null;\n\n    @property(cc.Node)\n    nListNodeRank: cc.Node[] = [];\n\n    @property(cc.Label)\n    lbtest: cc.Label = null;\n\n    @property(cc.SpriteFrame)\n    listSpfBallon: cc.SpriteFrame[] = [];\n\n    @property(cc.PageView)\n    pageView: cc.PageView = null;\n\n    @property(cc.Prefab)\n    ballonPrefabs: cc.Prefab = null;\n\n    @property(cc.Node)\n    nListBallon: cc.Node[] = [];\n    indexBallon = 1;\n    onLoad() {\n        GameManager.instance = this;\n        this.updateRank(this.nListNodeRank);\n        //this.updateActive(Global.score);\n        \n    }\n    start() {\n\n    }\n    populatePages() {\n\n        //this.updatePageView();\n\n    }\n\n    onNextPage() {\n\n    }\n    updateRank(listNodeLabel: cc.Node[]) {\n        Global.dataScore = JSON.parse(cc.sys.localStorage.getItem(\"scores\")) || [];\n        console.log(\"Diem luu ne \", Global.dataScore);\n        if (Global.dataScore.length === 0) {\n            console.log(\"Mảng scores rỗng, ẩn tất cả các node.\");\n            listNodeLabel.forEach(node => {\n                node.active = false;\n            });\n        } else {\n            listNodeLabel.forEach((node, index) => {\n                //console.log(\"index \", index);\n                //console.log(\"diem \", Global.dataScore)\n                if (index < Global.dataScore.length) {\n                    node.active = true;\n                    node.getComponent(cc.Label).string = Global.dataScore[index] + ' ';\n                } else {\n                    node.active = false;\n                }\n            });\n        }\n\n\n    }\n\n    removeCache() {\n        cc.sys.localStorage.clear();\n    }\n\n\n    clickPlay() {\n        let gameView = cc.instantiate(this.prfGameView)\n        this.node.addChild(gameView);\n    }\n    // update (dt) {}\n}\n"]}